generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id           String       @id
    email        String       @unique
    username     String       @unique
    fullname     String
    blocked      Boolean
    isAdmin      Boolean
    passwordHash String
    collections  Collection[]
    comments     Comment[]
    createdAt    DateTime     @default(now())
    updatedAt    DateTime     @updatedAt

    @@map("user")
}

model Topic {
    id          String       @id
    name        String       @unique
    collections Collection[]

    @@map("topic")
}

model Collection {
    owner            User              @relation(fields: [userId], references: [id], onDelete: Cascade)
    id               String            @id
    name             String
    topic            Topic             @relation(fields: [topicId], references: [id])
    image            String?
    userId           String
    topicId          String
    collectionFields CollectionField[]
    items            Item[]
    createdAt        DateTime          @default(now())
    updatedAt        DateTime          @updatedAt

    @@map("collection")
}

model CollectionField {
    id                  String               @id
    name                String
    collection          Collection           @relation(fields: [collectionId], references: [id], onDelete: Cascade)
    type                CollectionFieldType
    collectionId        String
    numberFields        NumberField[]
    textFields          TextField[]
    multilineTextFields MultilineTextField[]
    checkboxFields      CheckboxField[]
    dateFields          DateField[]

    @@map("collection_field")
}

enum CollectionFieldType {
    Number
    Text
    MultilineText
    Checkbox
    Date
}

model Item {
    collection          Collection           @relation(fields: [collectionId], references: [id], onDelete: Cascade)
    id                  String               @id
    name                String
    collectionId        String
    comments            Comment[]
    createdAt           DateTime             @default(now())
    updatedAt           DateTime             @updatedAt
    numberFields        NumberField[]
    textFields          TextField[]
    multilineTextFields MultilineTextField[]
    checkboxFields      CheckboxField[]
    dateFields          DateField[]
    tags                ItemTag[]

    @@map("item")
}

model ItemTag {
    item   Item   @relation(fields: [itemId], references: [id], onDelete: Cascade)
    tag    String
    itemId String

    @@unique([itemId, tag])
}

model NumberField {
    item              Item            @relation(fields: [itemId], references: [id], onDelete: Cascade)
    collectionField   CollectionField @relation(fields: [collectionFieldId], references: [id], onDelete: Cascade)
    value             Int
    itemId            String
    collectionFieldId String

    @@unique([itemId, collectionFieldId])
}

model TextField {
    item              Item            @relation(fields: [itemId], references: [id], onDelete: Cascade)
    collectionField   CollectionField @relation(fields: [collectionFieldId], references: [id], onDelete: Cascade)
    value             String
    itemId            String
    collectionFieldId String

    @@unique([itemId, collectionFieldId])
}

model MultilineTextField {
    item              Item            @relation(fields: [itemId], references: [id], onDelete: Cascade)
    collectionField   CollectionField @relation(fields: [collectionFieldId], references: [id], onDelete: Cascade)
    value             String
    itemId            String
    collectionFieldId String

    @@unique([itemId, collectionFieldId])
}

model CheckboxField {
    item              Item            @relation(fields: [itemId], references: [id], onDelete: Cascade)
    collectionField   CollectionField @relation(fields: [collectionFieldId], references: [id], onDelete: Cascade)
    value             Boolean
    itemId            String
    collectionFieldId String

    @@unique([itemId, collectionFieldId])
}

model DateField {
    item              Item            @relation(fields: [itemId], references: [id], onDelete: Cascade)
    collectionField   CollectionField @relation(fields: [collectionFieldId], references: [id], onDelete: Cascade)
    value             DateTime
    itemId            String
    collectionFieldId String

    @@unique([itemId, collectionFieldId])
}

model Comment {
    item      Item     @relation(fields: [itemId], references: [id], onDelete: Cascade)
    id        String   @id
    author    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    text      String
    itemId    String
    userId    String
    createdAt DateTime
    updatedAt DateTime @updatedAt

    @@map("comment")
}
